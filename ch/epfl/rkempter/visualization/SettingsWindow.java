/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ch.epfl.rkempter.visualization;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import org.openide.util.Exceptions;

/**
 *
 * @author rkempter
 */
public class SettingsWindow extends javax.swing.JFrame {
   
    private Connection conn =  null;
    private String table = "24h";
    private Date min24hDate;
    private Date max24hDate; //2008-10-31 10:04:00
    private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private int min24hTime = 0;
    
    /**
     * Creates new form SettingsWindow
     */
    public SettingsWindow() {
        
        // Parse dates
        try {
            min24hDate = sdf.parse("2008-10-31 10:27:28");
            max24hDate = sdf.parse("2009-04-28 16:28:02");
            
        } catch (ParseException ex) {
            Exceptions.printStackTrace(ex);
        }
        
        // Register MySQL Driver
        try {
            // Der Aufruf von newInstance() ist ein Workaround
            // für einige misslungene Java-Implementierungen

            Class.forName("com.mysql.jdbc.Driver").newInstance();
        } catch (Exception ex) {
            // Fehler behandeln
        }
        
        // Create connection
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/24h?user=root&zeroDateTimeBehavior=convertToNull");
        } catch (SQLException ex) {
            System.out.println("SQLException: " + ex.getMessage());
            System.out.println("SQLState: " + ex.getSQLState());
            System.out.println("VendorError: " + ex.getErrorCode());
        }
        
        
        
        initComponents();
        minHopsSpinner.setValue(2);
        maxHopsSpinner.setValue(5);
        
        min24hTime = (int) (min24hDate.getTime() / 1000 / 60);
        int max24hTime = (int) (max24hDate.getTime() / 1000 / 60);
        
        startSlider.setMinimum(0);
        startSlider.setMaximum(max24hTime - min24hTime);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleLabel = new javax.swing.JLabel();
        generateVideoButton = new javax.swing.JButton();
        newspaperComboBox = new javax.swing.JComboBox();
        newspaperLabel = new javax.swing.JLabel();
        minHopsLabel = new javax.swing.JLabel();
        maxHopsLabel = new javax.swing.JLabel();
        startLabel = new javax.swing.JLabel();
        minHopsSpinner = new javax.swing.JSpinner();
        endLabel = new javax.swing.JLabel();
        maxHopsSpinner = new javax.swing.JSpinner();
        estimationTextLabel = new javax.swing.JLabel();
        estimationShowLabel = new javax.swing.JLabel();
        startSlider = new javax.swing.JSlider();
        startShowLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Helvetica", 0, 24)); // NOI18N
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.titleLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(generateVideoButton, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.generateVideoButton.text")); // NOI18N
        generateVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateVideoButtonActionPerformed(evt);
            }
        });

        newspaperComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "24h", "Tribune de Genève" }));

        org.openide.awt.Mnemonics.setLocalizedText(newspaperLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.newspaperLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(minHopsLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.minHopsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(maxHopsLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.maxHopsLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(startLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.startLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(endLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.endLabel.text")); // NOI18N

        maxHopsSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maxHopsSpinnerStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(estimationTextLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.estimationTextLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(estimationShowLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.estimationShowLabel.text")); // NOI18N

        startSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                startSliderStateChanged(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(startShowLabel, org.openide.util.NbBundle.getMessage(SettingsWindow.class, "SettingsWindow.startShowLabel.text")); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                    .add(generateVideoButton)
                    .add(titleLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .add(layout.createSequentialGroup()
                .add(43, 43, 43)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(newspaperLabel)
                            .add(minHopsLabel)
                            .add(maxHopsLabel)
                            .add(startLabel))
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(73, 73, 73)
                                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(layout.createSequentialGroup()
                                        .add(startSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 276, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                        .add(startShowLabel))
                                    .add(minHopsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(maxHopsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                            .add(layout.createSequentialGroup()
                                .add(82, 82, 82)
                                .add(newspaperComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(127, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(estimationTextLabel)
                                .add(46, 46, 46)
                                .add(estimationShowLabel))
                            .add(endLabel))
                        .add(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(17, 17, 17)
                .add(titleLabel)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(newspaperComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(newspaperLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(startLabel)
                            .add(startShowLabel))
                        .add(15, 15, 15)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(endLabel)
                                .add(27, 27, 27)
                                .add(minHopsLabel)
                                .add(27, 27, 27)
                                .add(maxHopsLabel))
                            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                                .add(minHopsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                                .add(maxHopsSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 51, Short.MAX_VALUE)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(estimationTextLabel)
                            .add(estimationShowLabel))
                        .add(43, 43, 43)
                        .add(generateVideoButton)
                        .add(19, 19, 19))
                    .add(layout.createSequentialGroup()
                        .add(startSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void generateVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateVideoButtonActionPerformed
        // generate video here
        
        GephiFrameGeneration gephi = new GephiFrameGeneration(sdf.format(min24hDate), sdf.format(max24hDate));
        gephi.start();
        
    }//GEN-LAST:event_generateVideoButtonActionPerformed

    private void startSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_startSliderStateChanged
        
        long minutes = startSlider.getValue();
        
        Date newDate = new Date();
        min24hDate.setTime((min24hTime + minutes)*60*1000);
        
        startShowLabel.setText(sdf.format(min24hDate));
        
        getDurationEstimation();
    }//GEN-LAST:event_startSliderStateChanged

    private void maxHopsSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maxHopsSpinnerStateChanged
        getDurationEstimation();
    }//GEN-LAST:event_maxHopsSpinnerStateChanged
    
    private void getDurationEstimation() {
        // datetime
        int minHopsCount = (Integer) minHopsSpinner.getValue();
        int maxHopsCount = (Integer) maxHopsSpinner.getValue();
        int estimatedDuration = 0;
        
        Statement stmt = null;
        ResultSet rs = null;
        if(conn != null) {
            try{
                stmt = conn.createStatement();

                String query = String.format("SELECT COUNT(*) as nbr FROM edges WHERE date >= '%s' AND date <= '%s'", sdf.format(min24hDate), sdf.format(max24hDate));

                rs = stmt.executeQuery(query);
                rs.first();
                estimatedDuration = rs.getInt(1);
            } catch (SQLException ex) {
                Exceptions.printStackTrace(ex);
            } finally {
                if (rs != null) {
                    try {
                        rs.close();
                    } catch (SQLException sqlEx) { // ignore }
                        rs = null;
                    }
                }

                if (stmt != null) {
                    try {
                        stmt.close();
                    } catch (SQLException sqlEx) { // ignore }

                        stmt = null;
                    }
                }
            }
        }
        
        // Create an sql connection and do an estimation
        estimationShowLabel.setText(estimatedDuration+" seconds");
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SettingsWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SettingsWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel endLabel;
    private javax.swing.JLabel estimationShowLabel;
    private javax.swing.JLabel estimationTextLabel;
    private javax.swing.JButton generateVideoButton;
    private javax.swing.JLabel maxHopsLabel;
    private javax.swing.JSpinner maxHopsSpinner;
    private javax.swing.JLabel minHopsLabel;
    private javax.swing.JSpinner minHopsSpinner;
    private javax.swing.JComboBox newspaperComboBox;
    private javax.swing.JLabel newspaperLabel;
    private javax.swing.JLabel startLabel;
    private javax.swing.JLabel startShowLabel;
    private javax.swing.JSlider startSlider;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
}
